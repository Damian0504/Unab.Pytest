Test_scraping.py

import pytest
import requests
from bs4 import BeautifulSoup
from my_scraping_module import fetch_page, parse_titles, scrape_titles 

def test_fetch_page_success(requests_mock):
    url = 'https://infobae.com'
    headers = {'User-Agent': 'GoogleChrome'}
    mock_html = '<html><body><h2 class="article-title">Test Title</h2></body></html>'
    requests_mock.get(url, text=mock_html)

    result = fetch_page(url, headers)
    assert result == mock_html

def test_fetch_page_error(requests_mock):
    url = 'https://infobae.com'
    headers = {'User-Agent': 'GoogleChrome'}
    requests_mock.get(url, status_code=404)

    with pytest.raises(Exception, match="Error: 404"):
        fetch_page(url, headers)

def test_parse_titles():
    html_content = '<html><body><h2 class="article-title">Test Title 1</h2><h2 class="article-title">Test Title 2</h2></body></html>'
    expected_titles = ['Test Title 1', 'Test Title 2']

    titles = parse_titles(html_content)
    assert titles == expected_titles

def test_scrape_titles(requests_mock):
    url = 'https://infobae.com'
    headers = {'User-Agent': 'GoogleChrome'}
    mock_html = '<html><body><h2 class="article-title">Test Title</h2></body></html>'
    requests_mock.get(url, text=mock_html)

    expected_titles = ['Test Title']
    titles = scrape_titles(url)
    assert titles == expected_titles

#Explicacion del codigo: Test_scraping.py
Beautifulsoup: Se importa BeautifulSoup desde el módulo bs4 para extraer datos de una pagina web y contenidos HTML.
Pytest: Biblioteca utilizada para escribir y ejecutar pruebas.

Test_fetch_page_success:
Simula una respuesta exitosa con contenido HTML.
Verifica que fetch_page devuelva el contenido HTML correcto.

Test_fetch_page_error:
Simula una respuesta con un error 404.
Verifica que fetch_page lance una excepción con el mensaje de error correcto.

Test_parse_titles:
Proporciona contenido HTML directamente a parse_titles.
Verifica que parse_titles extraiga y devuelva los títulos correctos.

Test_scrape_titles:
Simula una respuesta exitosa con contenido HTML.

 
Ejecutar las Pruebas:
Para ejecutar estas pruebas, asegúrate de tener pytest instalado y luego ejecuta pytest en la línea de comandos en el directorio donde se encuentra tu archivo de pruebas.
pytest descubrirá automáticamente las funciones que comienzan con test y ejecutará las pruebas, proporcionando un reporte de los resultados.

Este conjunto de pruebas garantiza que las funciones fetch_page_success, fetch_ page, parse_titles y scrape_titles funcionan correctamente bajo condiciones controladas.
